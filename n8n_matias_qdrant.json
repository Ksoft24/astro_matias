{
  "name": "matias_qdrant",
  "nodes": [
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "=matias_asistente",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        1344,
        656
      ],
      "id": "ac6b0600-e99f-4e18-ab32-27c49df71a92",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "4bS7XEAsV4VmxtYO",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $('AI Agent').item.json.output }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "{{$('Set File ID').item.json.file_id}}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1088,
        832
      ],
      "id": "73715837-0603-4cd0-9e5b-1e951ac050be",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkSize": 4500,
        "chunkOverlap": 500,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        864,
        976
      ],
      "id": "5820bc7f-898b-4943-9096-bc1e29fde63b",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        704,
        784
      ],
      "id": "1e516cad-4a74-4011-9496-2d15cbdc3e54",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "lNnq6wAHs5UMH8lQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -160,
        320
      ],
      "id": "50771f22-75f2-477c-8c7e-20b5d7563621",
      "name": "When clicking â€˜Execute workflowâ€™"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto del CSV desde el nodo anterior\nconst csvText = $json[\"data\"] || $json.body || $json; // depende del formato del nodo HTTP\n\n// Verificar que haya contenido\nif (!csvText || typeof csvText !== 'string') {\n  throw new Error(\"No se recibiÃ³ texto CSV. Revisa que el nodo HTTP devuelva formato 'String'.\");\n}\n\n// Separar lÃ­neas\nconst lines = csvText.trim().split(/\\r?\\n/);\n\n// --- FunciÃ³n robusta para separar por comas respetando comillas ---\nfunction parseCSVLine(line) {\n  const regex = /(\"([^\"]*)\"|[^,]+)/g;\n  const matches = [...line.matchAll(regex)];\n  return matches.map(m => (m[2] !== undefined ? m[2] : m[1] || m[0])).map(c => c.trim());\n}\n\n// Tomar encabezados\nconst headers = parseCSVLine(lines[0]);\n\n// Buscar los Ã­ndices de las columnas\nconst idxTitle = headers.indexOf(\"Title\");\nconst idxLink = headers.indexOf(\"Link\");\n\nif (idxTitle === -1 || idxLink === -1) {\n  throw new Error(\"No se encontraron las columnas 'Title' o 'Link' en el CSV.\");\n}\n\n// --- ðŸ”¢ Define aquÃ­ el rango que quieres procesar ---\nconst start = 26; // fila inicial (1 = primera despuÃ©s del encabezado)\nconst end = 30;   // fila final (no inclusiva)\n\n// Crear lista JSON solo para ese rango\nconst selectedLines = lines.slice(start, end); // omite encabezado y procesa rango\n\nconst result = selectedLines.map(line => {\n  const cols = parseCSVLine(line);\n  const titulo = cols[idxTitle];\n  const link = cols[idxLink];\n\n  // Solo incluir filas con un enlace vÃ¡lido\n  if (!link || !/^https?:\\/\\//.test(link)) return null;\n\n  return { titulo, link };\n}).filter(Boolean); // elimina los null\n\n// Retornar el arreglo en formato compatible con n8n\nreturn result.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        320
      ],
      "id": "a8041c64-0bc5-4703-b933-e66414cd3137",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        624,
        320
      ],
      "id": "37dff794-597d-4c39-802a-30507495981f",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1568,
        960
      ],
      "id": "4fb009be-b436-4d1c-9cd5-4e19c9e92e50",
      "name": "Wait",
      "webhookId": "654544fe-f566-4baf-bab3-5b49d46f9f37"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        288
      ],
      "id": "e6f1b976-8c92-4dfc-a16f-b920ef5adaf2",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "Extrae del mensaje web , el contenido del articulo cientÃ­fico mencionado en un solo texto, no lo resumas trata de poner todo lo que se mencione , coloca en la parte superior el titulo de la investigaciÃ³n, para enviarlo a una base de datos vectorial, pasalo a espaÃ±ol"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1024,
        512
      ],
      "id": "52e29660-af1e-422f-abf6-e98832bba71a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4-turbo",
          "mode": "list",
          "cachedResultName": "gpt-4-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        832,
        640
      ],
      "id": "cc8110eb-3b35-497e-bea0-e12c5a0a80bd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "lNnq6wAHs5UMH8lQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        448
      ],
      "id": "6ea4e837-badd-42ad-b567-6a27a062f394",
      "name": "pagina_articulo"
    },
    {
      "parameters": {
        "url": "https://raw.githubusercontent.com/jgalazka/SB_publications/main/SB_publication_PMC.csv",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        48,
        320
      ],
      "id": "8663bbdc-767d-4173-b5f3-ef05ed6c40d5",
      "name": "csv_listado"
    }
  ],
  "pinData": {},
  "connections": {
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "csv_listado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "pagina_articulo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pagina_articulo": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "csv_listado": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6d31e602-3aac-475a-a66b-454946472545",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "77d9e31bf9cd43074e705285ddaae3c88bf9954b1511ac9ecc122903697650ce"
  },
  "id": "BpDVoAV188TCjauX",
  "tags": []
}